version: '3.8'

services:
  # 1. PostgreSQL Database
  postgres-db:
    image: postgres:14-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=postgres
    networks:
      - shared-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Healthcheck to ensure database is ready
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # 2. Config Server
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - shared-network
    healthcheck:
      test: "curl -f http://localhost:8888/actuator/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # 3. Service Discovery
  service-discovery:
    build: ./service-discovery
    container_name: service-discovery
    ports:
      - "8761:8761"
    networks:
      - shared-network
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888

    healthcheck:
      test: "curl -f http://localhost:8761/actuator/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 4. User Backend
  user-backend:
    build: ./user-backend
    container_name: user-backend
    ports:
      - "8080:8080"
    networks:
      - shared-network
    depends_on:
      postgres-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=${DB_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka/
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    volumes:
      - ./all-logs:/var/logs

  product-service:
    build: ./product-service
    container_name: product-service
    ports:
      - "8081:8081"
    networks:
      - shared-network
    depends_on:
      postgres-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=${DB_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka/
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    healthcheck:
      test: "curl -f http://localhost:8081/actuator/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    ports:
      - "8082:8082"
    networks:
      - shared-network
    depends_on:
      postgres-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=${DB_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka/
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    healthcheck:
      test: "curl -f http://localhost:8082/actuator/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8083:8083"
    networks:
      - shared-network
    depends_on:
      postgres-db:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=${DB_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka/
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    healthcheck:
      test: "curl -f http://localhost:8083/actuator/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # 5. API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8085:8085"
    networks:
      - shared-network
    depends_on:
      order-service:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - eureka.client.service-url.defaultZone=http://service-discovery:8761/eureka/
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}

  # 6. Prometheus Service
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - shared-network
    volumes:
      # Mount the configuration file we created
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    # It's good practice to wait for other services to be healthy
    depends_on:
      api-gateway:
        condition: service_started # or service_healthy if you have a healthcheck
      order-service:
        condition: service_healthy

  # 7. Grafana Service
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - shared-network
    volumes:
      # This named volume will persist your dashboards and configurations
      - grafana_data:/var/lib/grafana
    environment:
      # This allows anonymous login for ease of use in development
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus


# Common network
networks:
  shared-network:
    driver: bridge
    name: shared-network

# Database data volume
volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local